
Assign3_Prog3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000168  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000360  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000360  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000368  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          0000001c  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_line   000000ee  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000da  00000000  00000000  00020195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000047  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000e6  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002040e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000034 	.word	0x20000034
 8000214:	00000000 	.word	0x00000000
 8000218:	08000348 	.word	0x08000348

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000038 	.word	0x20000038
 8000234:	08000348 	.word	0x08000348

08000238 <main>:
	.syntax unified
	.text
	.global main
main:	ldr	 	r0,=Ary8	//Loads the memory address for Ary8 into r0
 8000238:	4818      	ldr	r0, [pc, #96]	; (800029c <main+0x64>)
		ldr	 	r1,=Ary32	//Loads the memory address for Ary32 into r1
 800023a:	4919      	ldr	r1, [pc, #100]	; (80002a0 <main+0x68>)
		ldrsb 	r2,[r0,#0]	//Load first value in Ary8 in r2
 800023c:	f990 2000 	ldrsb.w	r2, [r0]
		ldr  	r3,[r1,#0]	//Load first value in Ary32 r3
 8000240:	680b      	ldr	r3, [r1, #0]
		sub  	r2,r3		//Subtract the first value of each Array
 8000242:	eba2 0203 	sub.w	r2, r2, r3
		ldr  	r4,=Diff	//Loads the memory address for Diff into r4
 8000246:	4c17      	ldr	r4, [pc, #92]	; (80002a4 <main+0x6c>)
		str  	r2,[r4,#0]	//Stores difference in first value at Diff memory address
 8000248:	6022      	str	r2, [r4, #0]
		ldrsb 	r2,[r0,#1]	//Loads next value in Ary8
 800024a:	f990 2001 	ldrsb.w	r2, [r0, #1]
		ldr	 	r3,[r1,#4]	//Loads next value in Ary32
 800024e:	684b      	ldr	r3, [r1, #4]
		sub  	r2,r3		//Subtract the second value of each Array
 8000250:	eba2 0203 	sub.w	r2, r2, r3
		str	 	r2,[r4,#4]	//Stores difference in second value at Diff memory address
 8000254:	6062      	str	r2, [r4, #4]
		ldrsb 	r2,[r0,#2]	//Loads third value in Ary8
 8000256:	f990 2002 	ldrsb.w	r2, [r0, #2]
		ldr  	r3,[r1,#8]	//Loads third value in Ary32
 800025a:	688b      	ldr	r3, [r1, #8]
		sub  	r2,r3		//Subtract the third value of each Array
 800025c:	eba2 0203 	sub.w	r2, r2, r3
		str	 	r2,[r4,#8]	//Stores difference in third value at Diff memory address
 8000260:	60a2      	str	r2, [r4, #8]
		ldrsb 	r2,[r0,#3]	//Loads fourth value in Ary8
 8000262:	f990 2003 	ldrsb.w	r2, [r0, #3]
		ldr  	r3,[r1,#12]	//Loads fourth value in Ary32
 8000266:	68cb      	ldr	r3, [r1, #12]
		sub  	r2,r3		//Subtract the third value of each Array
 8000268:	eba2 0203 	sub.w	r2, r2, r3
		str	 	r2,[r4,#12]	//Stores difference in fourth value at Diff memory address
 800026c:	60e2      	str	r2, [r4, #12]

		//Starts Addition portion of program

		ldrsb 	r2,[r0,#0]	//Load first value in Ary8 in r4
 800026e:	f990 2000 	ldrsb.w	r2, [r0]
		ldr  	r3,[r1,#0]	//Load first value in Ary32 r5
 8000272:	680b      	ldr	r3, [r1, #0]
		add  	r2,r3		//Add the first value of each Array
 8000274:	441a      	add	r2, r3
		ldr  	r4,=Sum		//Loads the memory address for Sum into r6
 8000276:	4c0c      	ldr	r4, [pc, #48]	; (80002a8 <main+0x70>)
		str  	r2,[r4,#0]	//Stores sum in first value at Sum memory address
 8000278:	6022      	str	r2, [r4, #0]
		ldrsb 	r2,[r0,#1]	//Loads next value in Ary8
 800027a:	f990 2001 	ldrsb.w	r2, [r0, #1]
		ldr	 	r3,[r1,#4]	//Loads next value in Ary32
 800027e:	684b      	ldr	r3, [r1, #4]
		add  	r2,r3		//Add the second value of each Array
 8000280:	441a      	add	r2, r3
		str  	r2,[r4,#4]	//Stores sum in second value at Sum memory address
 8000282:	6062      	str	r2, [r4, #4]
		ldrsb 	r2,[r0,#2]	//Loads third value in Ary8
 8000284:	f990 2002 	ldrsb.w	r2, [r0, #2]
		ldr  	r3,[r1,#8]	//Loads third value in Ary32
 8000288:	688b      	ldr	r3, [r1, #8]
		add  	r2,r3		//Add the third value of each Array
 800028a:	441a      	add	r2, r3
		str  	r2,[r4,#8]	//Stores sum in third value at Sum memory address
 800028c:	60a2      	str	r2, [r4, #8]
		ldrsb 	r2,[r0,#3]	//Loads fourth value in Ary8
 800028e:	f990 2003 	ldrsb.w	r2, [r0, #3]
		ldr  	r3,[r1,#12]	//Loads fourth value in Ary32
 8000292:	68cb      	ldr	r3, [r1, #12]
		add  	r2,r3		//Add the third value of each Array
 8000294:	441a      	add	r2, r3
		str  	r2,[r4,#12]	//Stores sum in fourth value at Sum memory address
 8000296:	60e2      	str	r2, [r4, #12]
		b	 	.
 8000298:	e7fe      	b.n	8000298 <main+0x60>
 800029a:	0000      	.short	0x0000
main:	ldr	 	r0,=Ary8	//Loads the memory address for Ary8 into r0
 800029c:	20000000 	.word	0x20000000
		ldr	 	r1,=Ary32	//Loads the memory address for Ary32 into r1
 80002a0:	20000004 	.word	0x20000004
		ldr  	r4,=Diff	//Loads the memory address for Diff into r4
 80002a4:	20000014 	.word	0x20000014
		ldr  	r4,=Sum		//Loads the memory address for Sum into r6
 80002a8:	20000024 	.word	0x20000024

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffab 	bl	8000238 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80002f8:	20000050 	.word	0x20000050

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	; (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	; (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
