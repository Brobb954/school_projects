	.syntax unified
	.text
	.global main
main:	mov		r0,#0			//Initalizes r0 to 0 as a counter to move through the string
		ldr		r1,=String		//Loads address of string into r1
loop:	ldrb	r1,[r1,r0]		//Loads next character of string into r1
		mov		r2,r1			//Move current value to r2 for analysis
		beq		ploop			//If loaded value is ascii code 0(null), branch to pop loop
		cmp		r2,#65			//Detect captial letters comparing to the lowest ascii code
		blt		rdy				//If ascii is less than 65 it does not need to be converted, branch to rdy
		cmp		r2,#90			//Detect capital letters by comparing to the highest ascii code
		bgt		good			//If ascii is greater than 90 it does not need to be converted, branch to rdy
		add		r,0x20			//If between 65 and 90, add hex 20 to convert from uppercase to lowercase
rdy:	push	{r2}			//Push r1 onto the stack to save for final
		add		r0,#1			//Increment r0 to select next character
		bl		loop			//Branch back to top of loop to check next character
ploop:	pop		{r2}			//Remove value from stack to prep for saving back to string
		beq		end				//If pop is ascii code 0(null), all done, branch to end
		str		r2,[r1,r0]		//Store value back into its spot in String
		sub		r0,#1			//Decrement r0 to select next character
		bl		ploop			//Branch back to top of ploop to store next
end:	b		.

// Data section starts at 0x20000000
	.data
String:	.space	20		//Allocates 20 bytes to store characters of the ASCII string
